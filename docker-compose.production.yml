version: '3.8'

# Production environment override with SSL/TLS support
# Usage: docker-compose -f docker-compose.yml -f docker-compose.production.yml up

services:
  tobelog:
    container_name: tobelog-production
    # Don't expose port directly in production - use reverse proxy
    # ports:
    #   - "3000:3000"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - DATABASE_URL=sqlite:///home/app/data/blog.db
      - RUST_LOG=warn  # Less verbose logging in production
      - DROPBOX_ACCESS_TOKEN=${DROPBOX_ACCESS_TOKEN}
      - API_KEY=${API_KEY:?PRODUCTION_API_KEY is not set. Please set it in your .env file or environment.}
    volumes:
      # Production database with backup considerations
      - blog_data_production:/home/app/data
      # Production config
      - ./config:/home/app/config:ro
    networks:
      - tobelog-production-network
    # Maximum security for production
    read_only: true  # Read-only filesystem for security
    # Production health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: tobelog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - letsencrypt_certs:/etc/letsencrypt:ro
      - letsencrypt_www:/var/www/html
      - blog_static:/var/lib/blog/static:ro
      - blog_media:/var/lib/blog/media:ro
    depends_on:
      - tobelog
    networks:
      - tobelog-production-network
    # nginx health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # nginx logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  certbot:
    image: certbot/certbot:latest
    container_name: tobelog-certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/html
    depends_on:
      - nginx
    # Automatic certificate renewal every 12 hours
    # For initial setup, run: docker-compose exec certbot certbot certonly --webroot -w /var/www/html -d your-domain.com
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet --webroot -w /var/www/html --post-hook \"nginx -s reload\"; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  tobelog-production-network:
    driver: bridge
    name: tobelog-production-network

volumes:
  blog_data_production:
    driver: local
    name: tobelog-blog-data-production
  letsencrypt_certs:
    driver: local
    name: tobelog-letsencrypt-certs
  letsencrypt_www:
    driver: local
    name: tobelog-letsencrypt-www
  blog_static:
    driver: local
    name: tobelog-static-files
  blog_media:
    driver: local
    name: tobelog-media-files